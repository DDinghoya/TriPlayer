#include "Application.hpp"
#include "ui/frame/settings/AppSearch.hpp"

namespace Frame::Settings {
    AppSearch::AppSearch(Main::Application * a) : Frame(a) {
        // Temporary variables
        Config * cfg = this->app->config();
        Aether::ListOption * opt;

        // Search::max_playlists
        opt = new Aether::ListOption("Playlist Limit", std::to_string(cfg->searchMaxPlaylists()), nullptr);
        opt->setCallback([this, cfg, opt]() {
            int val = cfg->searchMaxPlaylists();
            if (this->getNumberInput(val, "Playlist Limit", "", true)) {
                val = (val < -1 ? -1 : val);
                if (cfg->setSearchMaxPlaylists(val)) {
                    opt->setValue(std::to_string(val));
                }
            }
        });
        opt->setColours(this->app->theme()->muted2(), this->app->theme()->FG(), this->app->theme()->accent());
        this->list->addElement(opt);

        // Search::max_albums
        opt = new Aether::ListOption("Album Limit", std::to_string(cfg->searchMaxAlbums()), nullptr);
        opt->setCallback([this, cfg, opt]() {
            int val = cfg->searchMaxAlbums();
            if (this->getNumberInput(val, "Album Limit", "", true)) {
                val = (val < -1 ? -1 : val);
                if (cfg->setSearchMaxAlbums(val)) {
                    opt->setValue(std::to_string(val));
                }
            }
        });
        opt->setColours(this->app->theme()->muted2(), this->app->theme()->FG(), this->app->theme()->accent());
        this->list->addElement(opt);

        // Search::max_artists
        opt = new Aether::ListOption("Artist Limit", std::to_string(cfg->searchMaxArtists()), nullptr);
        opt->setCallback([this, cfg, opt]() {
            int val = cfg->searchMaxArtists();
            if (this->getNumberInput(val, "Artist Limit", "", true)) {
                val = (val < -1 ? -1 : val);
                if (cfg->setSearchMaxArtists(val)) {
                    opt->setValue(std::to_string(val));
                }
            }
        });
        opt->setColours(this->app->theme()->muted2(), this->app->theme()->FG(), this->app->theme()->accent());
        this->list->addElement(opt);

        // Search::max_songs
        opt = new Aether::ListOption("Song Limit", std::to_string(cfg->searchMaxSongs()), nullptr);
        opt->setCallback([this, cfg, opt]() {
            int val = cfg->searchMaxSongs();
            if (this->getNumberInput(val, "Song Limit", "", true)) {
                val = (val < -1 ? -1 : val);
                if (cfg->setSearchMaxSongs(val)) {
                    opt->setValue(std::to_string(val));
                }
            }
        });
        opt->setColours(this->app->theme()->muted2(), this->app->theme()->FG(), this->app->theme()->accent());
        this->list->addElement(opt);

        // Comment
        this->addComment("Limit the number of results returned for each search category. A negative number indicates no limit. Zero will hide the section completely from any search results.");
        this->list->addElement(new Aether::ListSeparator());

        // Search::max_phrases
        opt = new Aether::ListOption("Maximum Search Phrases", std::to_string(cfg->searchMaxPhrases()), nullptr);
        opt->setCallback([this, cfg, opt]() {
            int val = cfg->searchMaxPhrases();
            if (this->getNumberInput(val, "Maximum Search Phrases", "", false)) {
                val = (val < 1 ? 1 : val);
                if (cfg->setSearchMaxPhrases(val)) {
                    opt->setValue(std::to_string(val));
                    this->app->database()->setSearchPhraseCount(val);
                }
            }
        });
        opt->setColours(this->app->theme()->muted2(), this->app->theme()->FG(), this->app->theme()->accent());
        this->list->addElement(opt);
        this->addComment("The maximum number of 'phrases' to search with. Phrases are generated by swapping out words from the query with those found in your library. A larger number will result in a 'wider' search, which may take longer. This has a default value of 8, and can not be set to 0.");

        // Search::max_score
        opt = new Aether::ListOption("Maximum Search Score", std::to_string(cfg->searchMaxScore()), nullptr);
        opt->setCallback([this, cfg, opt]() {
            int val = cfg->searchMaxScore();
            if (this->getNumberInput(val, "Maximum Search Score", "", false)) {
                val = (val < 30 ? 30 : val);
                if (cfg->setSearchMaxScore(val)) {
                    opt->setValue(std::to_string(val));
                    this->app->database()->setSpellfixScore(val);
                }
            }
        });
        opt->setColours(this->app->theme()->muted2(), this->app->theme()->FG(), this->app->theme()->accent());
        this->list->addElement(opt);
        this->addComment("The maximum 'score' a potential result can have to be considered relevant. A score is calculated by determining how similar the title, artist, etc. is to the search query. A larger number will result in more results that are less relevant, but also better results for misspelled words. This has a default value of 130, and cannot be smaller than 30.");

    }
};